{"version":3,"sources":["Todoitem.js","App.js","reportWebVitals.js","index.js"],"names":["Todoitem","props","className","onClick","ondelete","id","todoval","App","useState","todo","setTodo","todoitems","setTodoitems","newarray","filter","element","index","type","placeholder","value","onChange","e","target","oldtodo","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAkBeA,EAfE,SAACC,GAEd,OACI,sBAAKC,UAAW,WAAhB,UAGC,mBAAGA,UAAU,mBAAmBC,QAAW,WAAKF,EAAMG,SAASH,EAAMI,OAErE,6BAAKJ,EAAMK,UACX,2BCwDMC,MAhEf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAeA,SAASR,EAASC,GAGhB,IAAIQ,EAAYF,EAAUG,QAAO,SAASC,EAAQC,GAC/C,OAAOA,IAAQX,KAElBO,EAAaC,GASf,OACE,mCAEE,qBAAKX,UAAU,WAAf,SAGE,sBAAKA,UAAU,aAAf,UACE,0CACA,uBACA,uBAAOe,KAAK,OAAOC,YAAY,gBAAgBC,MAAOV,EAAMW,SArCpE,SAAiBC,GAEdX,EAAQW,EAAEC,OAAOH,UAoCZ,wBAAQhB,QAhChB,WACES,GAAa,SAACW,GACZ,MAAM,GAAN,mBAAWA,GAAX,CAAoBd,OAEtBC,EAAQ,KA4BF,SAA6B,wCAC7B,6BAEIC,EAAUa,KAAI,SAACf,EAAKO,GAEnB,OAAQ,cAAC,EAAD,CAAUV,QAAWG,EAAML,SAAYA,EAAwBC,GAAMW,GAAbA,gBCxChES,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a3adc84e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst Todoitem = (props) => {\r\n   \r\n    return (\r\n        <div className =\"todoitem\">\r\n        \r\n           \r\n         <i className=\"fas fa-trash-alt\" onClick = {()=>{props.ondelete(props.id)}} ></i>\r\n        \r\n         <li>{props.todoval}</li> \r\n         <br/>\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todoitem\r\n","import './App.css';\nimport { useState } from \"react\";\nimport Todoitem from './Todoitem';\n\nfunction App() {\n  const [todo, setTodo] = useState(\"\");\n\n  const [todoitems, setTodoitems] = useState([]);\n\n  function setitem(e) {\n   \n     setTodo(e.target.value);\n    \n  }\n\n  function updatetodo() {\n    setTodoitems((oldtodo) => {\n      return [...oldtodo, todo];\n    })\n    setTodo(\"\");\n  }\n\n  function ondelete(id){\n    \n    \n    var newarray =  todoitems.filter(function(element,index){\n       return index!==id;\n    })\n    setTodoitems(newarray);\n   \n  \n\n  \n  }\n\n\n\n  return (\n    <>\n\n      <div className=\"main_div\">\n\n\n        <div className=\"center_div\">\n          <h2>Todo App</h2>\n          <br />\n          <input type=\"text\" placeholder=\"Add your todo\" value={todo} onChange={setitem} />\n          <button onClick={updatetodo}><small>+</small></button>\n          <ol>\n            {\n              todoitems.map((todo,index)=>{\n                \n               return( <Todoitem todoval = {todo} ondelete = {ondelete} key = {index} id = {index}/>)\n              })\n            }\n          </ol>\n\n\n\n\n        </div>\n\n      </div>\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}